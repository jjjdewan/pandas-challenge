{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "* Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Purchase ID</th>\n",
       "      <th>SN</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Item ID</th>\n",
       "      <th>Item Name</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Lisim78</td>\n",
       "      <td>20</td>\n",
       "      <td>Male</td>\n",
       "      <td>108</td>\n",
       "      <td>Extraction, Quickblade Of Trembling Hands</td>\n",
       "      <td>3.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Lisovynya38</td>\n",
       "      <td>40</td>\n",
       "      <td>Male</td>\n",
       "      <td>143</td>\n",
       "      <td>Frenzied Scimitar</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Ithergue48</td>\n",
       "      <td>24</td>\n",
       "      <td>Male</td>\n",
       "      <td>92</td>\n",
       "      <td>Final Critic</td>\n",
       "      <td>4.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Chamassasya86</td>\n",
       "      <td>24</td>\n",
       "      <td>Male</td>\n",
       "      <td>100</td>\n",
       "      <td>Blindscythe</td>\n",
       "      <td>3.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Iskosia90</td>\n",
       "      <td>23</td>\n",
       "      <td>Male</td>\n",
       "      <td>131</td>\n",
       "      <td>Fury</td>\n",
       "      <td>1.44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Purchase ID             SN  Age Gender  Item ID  \\\n",
       "0            0        Lisim78   20   Male      108   \n",
       "1            1    Lisovynya38   40   Male      143   \n",
       "2            2     Ithergue48   24   Male       92   \n",
       "3            3  Chamassasya86   24   Male      100   \n",
       "4            4      Iskosia90   23   Male      131   \n",
       "\n",
       "                                   Item Name  Price  \n",
       "0  Extraction, Quickblade Of Trembling Hands   3.53  \n",
       "1                          Frenzied Scimitar   1.56  \n",
       "2                               Final Critic   4.88  \n",
       "3                                Blindscythe   3.27  \n",
       "4                                       Fury   1.44  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###########################################################################\n",
    "# Interface to the pandas and numpy library and load csv file for reading\n",
    "#\n",
    "###########################################################################\n",
    "# Importing pandas and numpy libraries\n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "\n",
    "#  Create a path to the csv file\n",
    "file_to_load = \"resources/purchase_data.csv\"\n",
    "\n",
    "# Read the csv file using pd.read_csv() function \n",
    "#\n",
    "purchase_data_pd = pd.read_csv(file_to_load,encoding='utf-8')\n",
    "\n",
    "# Print top 5 rows\n",
    "purchase_data_pd.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Player Count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total players</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>576</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Total players\n",
       "0            576"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "########################################################\n",
    "##  1. Player Count: Display the total number of players\n",
    "#\n",
    "#   To do: Player Count\n",
    "########################################################\n",
    "# Calculate total players count, extract it by using .unique() on SN (Screen-Name)\n",
    "# as shown in head()\n",
    "#\n",
    "total_players = len(purchase_data_pd[\"SN\"].unique())\n",
    "\n",
    "# Create a data frame with total_players count \n",
    "#\n",
    "player_count = pd.DataFrame({\"Total players\":total_players},index = [0])\n",
    "\n",
    "# Display Player Count\n",
    "player_count\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Purchasing Analysis (Total)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Run basic calculations to obtain number of unique items, average price, etc.\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display the summary data frame\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of unique items</th>\n",
       "      <th>Average Price</th>\n",
       "      <th>Number of Purchases</th>\n",
       "      <th>Total Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>179</td>\n",
       "      <td>$3.05</td>\n",
       "      <td>780</td>\n",
       "      <td>$2,379.77</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Number of unique items Average Price  Number of Purchases Total Revenue\n",
       "0                     179         $3.05                  780     $2,379.77"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###########################################################################\n",
    "## 2. Purchasing Analysis (Total)\n",
    "#    To do:\n",
    "#    a) Run basic calculations to obtain number of unique items, average price, etc.\n",
    "#    b) Create a summary data frame to hold the results\n",
    "#    c) Optional: give the displayed data cleaner formatting\n",
    "#    d) Display the summary data frame\n",
    "# \n",
    "###########################################################################\n",
    "#\n",
    "# a) Perform basic calculation to find: Number of Unique Items, Average Price (mean),\n",
    "#    Number of Purchases and Total Revenue \n",
    "#\n",
    "# Total Number of unique items using \"Item ID\" as the key\n",
    "#\n",
    "number_of_unique_items = len(purchase_data_pd[\"Item ID\"].unique())\n",
    "\n",
    "# \n",
    "# Calculating Average price of puschasing using mean() function using \"Price\" column\n",
    "#\n",
    "average_price = purchase_data_pd[\"Price\"].mean()\n",
    "\n",
    "# Finding Total number of purchases using \"Purchase ID\"\n",
    "#\n",
    "number_of_purchases = purchase_data_pd[\"Purchase ID\"].count()\n",
    "\n",
    "# Calculating Total revenue using \"Price\"\n",
    "#\n",
    "total_revenue = purchase_data_pd[\"Price\"].sum()\n",
    "\n",
    "######################################################\n",
    "# b) Create a summary data frame to hold the above results\n",
    "# \n",
    "purchasing_analysis_df = pd.DataFrame({\"Number of unique items\":number_of_unique_items,\"Average Price\":average_price,\n",
    "                                    \"Number of Purchases\":number_of_purchases,\"Total Revenue\":total_revenue}, index=[0])\n",
    "\n",
    "# c) Optional: give the displayed data cleaner formatting\n",
    "# Format the data to currenncy in $ with 2 dicmal floting point numbers (as per the requiments)\n",
    "#\n",
    "purchasing_analysis_df[\"Average Price\"] = purchasing_analysis_df[\"Average Price\"].map(\"${:.2f}\".format)\n",
    "purchasing_analysis_df[\"Total Revenue\"] = purchasing_analysis_df[\"Total Revenue\"].map(\"${:,.2f}\".format)\n",
    "\n",
    "# d) Display the summary data frame\n",
    "#\n",
    "purchasing_analysis_df\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gender Demographics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Percentage and Count of Male Players\n",
    "\n",
    "\n",
    "* Percentage and Count of Female Players\n",
    "\n",
    "\n",
    "* Percentage and Count of Other / Non-Disclosed\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total Counts</th>\n",
       "      <th>Percentage of Players</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>484</td>\n",
       "      <td>84.03%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Female</th>\n",
       "      <td>81</td>\n",
       "      <td>14.06%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other / Non-Disclosed</th>\n",
       "      <td>11</td>\n",
       "      <td>1.91%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Total Counts Percentage of Players\n",
       "Gender                                                   \n",
       "Male                            484                84.03%\n",
       "Female                           81                14.06%\n",
       "Other / Non-Disclosed            11                 1.91%"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#############################################################\n",
    "## 3. Gender Demographics\n",
    "# To do:\n",
    "#    a) Percentage and Count of Male Players\n",
    "#    b) Percentage and Count of Female Players\n",
    "#    c) Percentage and Count of Other / Non-Disclosed\n",
    "#############################################################\n",
    "\n",
    "# Using groupby() function based on \"Gender\" as the key to do a group_by_gender \n",
    "# for the players\n",
    "group_by_gender = purchase_data_pd.groupby(\"Gender\")\n",
    "\n",
    "# Now, using \"SN\" column to uniqufy it to find Number of unique objects for the genders\n",
    "#\n",
    "number_of_unique_gender = group_by_gender[\"SN\"].nunique()\n",
    "\n",
    "# Calculate Percentage of Male, Female and Other/Non-DisclosedPlayers using number_of_unique_gender that \n",
    "# is identified earlier\n",
    "#\n",
    "percentage_of_players = (number_of_unique_gender/total_players)*100\n",
    "\n",
    "# Creating a data frame using Pantads DataFrame() function to bundle all the all results then\n",
    "# format is it (as per the requirement) and diaplay the results\n",
    "gender_summary = pd.DataFrame({\"Total Counts\": number_of_unique_gender, \"Percentage of Players\": percentage_of_players})\n",
    "\n",
    "# Formaaating the data frame surramry results\n",
    "#\n",
    "gender_summary[\"Percentage of Players\"] = gender_summary[\"Percentage of Players\"].map(\"{:.2f}%\".format)\n",
    "\n",
    "# Sort data in decscending order (max count 1st) for \"Total Count\"\n",
    "#\n",
    "gender_summary = gender_summary.sort_values(by=['Total Counts'], ascending=False)\n",
    "\n",
    "# Display Results\n",
    "#\n",
    "gender_summary\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Purchasing Analysis (Gender)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. by gender\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display the summary data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Purchase count</th>\n",
       "      <th>Average Purchase Price</th>\n",
       "      <th>Total Purchase value</th>\n",
       "      <th>Average Purchase Total per person</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Female</th>\n",
       "      <td>113</td>\n",
       "      <td>$3.20</td>\n",
       "      <td>$361.94</td>\n",
       "      <td>$4.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>652</td>\n",
       "      <td>$3.02</td>\n",
       "      <td>$1,967.64</td>\n",
       "      <td>$4.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other / Non-Disclosed</th>\n",
       "      <td>15</td>\n",
       "      <td>$3.35</td>\n",
       "      <td>$50.19</td>\n",
       "      <td>$4.56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Purchase count Average Purchase Price  \\\n",
       "Gender                                                         \n",
       "Female                            113                  $3.20   \n",
       "Male                              652                  $3.02   \n",
       "Other / Non-Disclosed              15                  $3.35   \n",
       "\n",
       "                      Total Purchase value Average Purchase Total per person  \n",
       "Gender                                                                        \n",
       "Female                             $361.94                             $4.47  \n",
       "Male                             $1,967.64                             $4.07  \n",
       "Other / Non-Disclosed               $50.19                             $4.56  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#############################################################\n",
    "## 4. Purchasing Analysis (Gender)\n",
    "# To do:\n",
    "#    a) Run basic calculations to obtain purchase count, avg. purchase price, avg. \n",
    "#       purchase total per person etc. by gender\n",
    "#    b) Create a summary data frame to hold the results\n",
    "#    c) Optional: give the displayed data cleaner formatting\n",
    "#    d) Display the summary data frame\n",
    "#\n",
    "#############################################################\n",
    "#  \n",
    "# Perform groupby \"Gender\" on \"purchase_data_pd\" data\n",
    "#\n",
    "groupby_gender = purchase_data_pd.groupby(\"Gender\")\n",
    "\n",
    "# a) Run basic calculations to obtain\n",
    "# Purchase count, Average purchase price (mean), Average purchase total per person based on Gender\n",
    "#\n",
    "purchase_count = groupby_gender[\"Age\"].count()\n",
    "average_purchase = groupby_gender[\"Price\"].mean()\n",
    "total_purchase_amount = groupby_gender[\"Price\"].sum()\n",
    "average_purchase_person =(total_purchase_amount/number_of_unique_gender)\n",
    "\n",
    "# b) Creating a data frame using Pantads DataFrame() function to bundle all the all results\n",
    "#\n",
    "summary_data_frame_results = pd.DataFrame({\"Purchase count\":purchase_count,\"Average Purchase Price\":average_purchase,\n",
    "                           \"Total Purchase value\":total_purchase_amount,\"Average Purchase Total per person\":average_purchase_person})\n",
    "\n",
    "# c) Formatting the \"summary_data_frame_results\" (as per the requirement) and diaplay the results\n",
    "# do a clean formatting \n",
    "summary_data_frame_results[\"Average Purchase Price\"] = summary_data_frame_results[\"Average Purchase Price\"].map(\"${:.2f}\".format)\n",
    "summary_data_frame_results[\"Total Purchase value\"]  = summary_data_frame_results[\"Total Purchase value\"].map(\"${:,.2f}\".format)\n",
    "summary_data_frame_results[\"Average Purchase Total per person\"] = summary_data_frame_results[\"Average Purchase Total per person\"].map(\"${:.2f}\".format)\n",
    "\n",
    "# d) Display the summary data frame\n",
    "# \n",
    "summary_data_frame_results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Age Demographics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Establish bins for ages\n",
    "\n",
    "\n",
    "* Categorize the existing players using the age bins. Hint: use pd.cut()\n",
    "\n",
    "\n",
    "* Calculate the numbers and percentages by age group\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Optional: round the percentage column to two decimal points\n",
    "\n",
    "\n",
    "* Display Age Demographics Table\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'purchase_data_pd_age_grouped' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-46-d262b39de3b5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;31m# Calculate the unique numbers of player count and percentages by age group\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m \u001b[0munique_number_player_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpurchase_data_pd_age_grouped\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"SN\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnunique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0mpercentage_by_age_group\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0munique_number_player_count\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mtotal_players\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'purchase_data_pd_age_grouped' is not defined"
     ]
    }
   ],
   "source": [
    "##################################################################\n",
    "# 5. Age Demographics\n",
    "#    a) Establish bins for ages\n",
    "#    b) Categorize the existing players using the age bins\n",
    "#    c) Calculate the numbers and percentages by age group\n",
    "#    d) Create a summary data frame to hold the results\n",
    "#    e) Optional: round the percentage column to two decimal points\n",
    "#    f) Display Age Demographics Table\n",
    "#\n",
    "#################################################################\n",
    "#\n",
    "# a) Establish bins for ages and create groups by age\n",
    "# \n",
    "age_bins = [0, 9.90, 14.90, 19.90, 24.90, 29.90, 34.90, 39.90, 99999]\n",
    "group_by_age = [\"<10\", \"10-14\", \"15-19\", \"20-24\", \"25-29\", \"30-34\", \"35-39\", \"40+\"]\n",
    "\n",
    "# b) Categorize the existing players using the age bins\n",
    "# Slice data using pd.cut on \"purchase_data_pd\" for \"Age\" group \n",
    "# and  Categorize the existing players based on age_bins  \n",
    "#\n",
    "purchase_data_pd[\"Age Group\"] = pd.cut(purchase_data_pd[\"Age\"],age_bins, labels=group_by_age)\n",
    "\n",
    "# Updated/Refined purchase data based on \"Age Group\", age_bins and \"group_by_age\"\n",
    "#\n",
    "purchase_data_pd\n",
    "\n",
    "# c) Calculate the numbers of players and percentages by age group\n",
    "#\n",
    "# Use updated \"purchase_data_pd\" data frame and use groupby() \n",
    "# to create \"purchase_data_pd_age_group\" based \"Age Group\" category\n",
    "# that will be used for further calculations\n",
    "#\n",
    "purchase_data_pd_age_group = purchase_data_pd.groupby(\"Age Group\")\n",
    "\n",
    "# Calculate the unique numbers of player count and percentages by age group \n",
    "# \n",
    "unique_number_player_count = purchase_data_pd_age_group[\"SN\"].nunique()\n",
    "percentage_by_age_group = (unique_number_player_count/total_players)*100\n",
    "\n",
    "# d) Create a summary data frame to hold the results\n",
    "#    Using pandas DataFrame() function to hold the above caculations for unique_number_player_count and \n",
    "#    percentage_by_age_group that will be used for formatting and display the results\n",
    "#\n",
    "data_frame_age_demographics = pd.DataFrame({\"Total count\":unique_number_player_count, \"Percentage of players\":percentage_by_age_group})\n",
    "\n",
    "# e) Optional: round the percentage column to two decimal points\n",
    "# \n",
    "# Reset data_frame_age_demographics.index.name to None for clean formatting\n",
    "#\n",
    "data_frame_age_demographics.index.name = None\n",
    "data_frame_age_demographics[\"Percentage of players\"] = data_frame_age_demographics[\"Percentage of players\"].map(\"{:.2f}%\".format)\n",
    "\n",
    "# f) Display Age Demographics Table\n",
    "data_frame_age_demographics\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Purchasing Analysis (Age)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Bin the purchase_data data frame by age\n",
    "\n",
    "\n",
    "* Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. in the table below\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display the summary data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "############################################################################\n",
    "# 6. Purchasing Analysis by Age:\n",
    "#    a) Bin the purchase_data data frame by age\n",
    "#    b) Run basic calculations to obtain purchase count, avg. purchase price, \n",
    "#    avg. purchase total per person etc. in the table below\n",
    "#    c) Create a summary data frame to hold the results\n",
    "#    d) Optional: give the displayed data cleaner formatting\n",
    "#    e) Display the summary data frame\n",
    "#\n",
    "###########################################################################\n",
    "#\n",
    "# a) Bin the purchase_data data frame by age\n",
    "# Using the last data frame group and Bin by \"Age\" to do the calculations for:\n",
    "#  b) ... purchase count, avg. purchase price, avg. purchase total per person etc.\n",
    "#\n",
    "purchase_count_by_age = purchase_data_pd_age_group[\"Age\"].count()\n",
    "average_purchase_price = purchase_data_pd_age_group[\"Price\"].mean()\n",
    "purchase_total_per_person = purchase_data_pd_age_group[\"Price\"].sum()\n",
    "average_purchase_per_person =(purchase_total_per_person/unique_number_player_count)\n",
    "\n",
    "# create a DataFrame to hold the above results \n",
    "purchase_analysis_by_age_group = pd.DataFrame({\"Purchase count\":purchase_count_by_age,\n",
    "                                      \"Average Purchase Price\":average_purchase_price,\n",
    "                                       \"Total Purchase value\":purchase_total_per_person,\n",
    "                                        \"Average Purchase Total per person\":average_purchase_per_person})\n",
    "# d) Optional: give the displayed data cleaner formatting\n",
    "# Formatting data frame based based on the example format \n",
    "#\n",
    "purchase_analysis_by_age_group[\"Average Purchase Price\"] = purchase_analysis_by_age_group[\"Average Purchase Price\"].map(\"${:.2f}\".format)\n",
    "purchase_analysis_by_age_group[\"Total Purchase value\"]  = purchase_analysis_by_age_group[\"Total Purchase value\"].map(\"${:,.2f}\".format)\n",
    "purchase_analysis_by_age_group[\"Average Purchase Total per person\"] = purchase_analysis_by_age_group[\"Average Purchase Total per person\"].map(\"${:.2f}\".format)\n",
    "\n",
    "# e) Display the summary data frame\n",
    "#\n",
    "purchase_analysis_by_age_group\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Top Spenders"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Run basic calculations to obtain the results in the table below\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Sort the total purchase value column in descending order\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display a preview of the summary data frame\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "################################################################\n",
    "# 7. Top Spenders¶\n",
    "#    a) Run basic calculations to obtain the results in the table below\n",
    "#    b) Create a summary data frame to hold the results\n",
    "#    c) Sort the total purchase value column in descending order\n",
    "#    d) Optional: give the displayed data cleaner formatting\n",
    "#    e) Display a preview of the summary data frame\n",
    "#\n",
    "################################################################\n",
    "# \n",
    "# Perform groupby on (SN-Screen Name) on \"purchase_data_pd\" \n",
    "#\n",
    "purchase_data_pd_SN_group = purchase_data_pd.groupby(\"SN\")\n",
    "\n",
    "# a) Run basic calculations to obtain the results in the table below\n",
    "# Calculate data as per table: \n",
    "#        Purchase count, Average Purchase Price, Total Purchase value\n",
    "# \n",
    "purchase_count = purchase_data_pd_SN_group[\"Age\"].count()\n",
    "average_purchase_value = purchase_data_pd_SN_grouped[\"Price\"].mean()\n",
    "total_purchase_value = purchase_data_pd_SN_group[\"Price\"].sum()\n",
    "\n",
    "#  b) Create a summary data frame to hold the results\n",
    "# Create a DataFrame named \"top_spenders\" with the above data \n",
    "#\n",
    "top_spenders = pd.DataFrame({\"Purchase count\":purchase_count,\"Average Purchase Price\":average_purchase_value,\n",
    "                           \"Total Purchase value\":total_purchase_value})\n",
    "\n",
    "# c) Sort the total purchase value column in descending order\n",
    "#\n",
    "top_spenders = top_spenders.sort_values(\"Total Purchase value\", ascending = False)\n",
    "\n",
    "# d) Optional: give the displayed data cleaner formatting\n",
    "#  Formatting data as required for Price and Value in $ with 2 decimal point\n",
    "#\n",
    "top_spenders[\"Average Purchase Price\"] = top_spenders[\"Average Purchase Price\"].map(\"${:.2f}\".format)\n",
    "top_spenders[\"Total Purchase value\"]  = top_spenders[\"Total Purchase value\"].map(\"${:,.2f}\".format)\n",
    "\n",
    "# e) Display a preview of the summary data frame\n",
    "# Print the data frame for the above results on \"top_spender\"\n",
    "top_spenders.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Most Popular Items"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Retrieve the Item ID, Item Name, and Item Price columns\n",
    "\n",
    "\n",
    "* Group by Item ID and Item Name. Perform calculations to obtain purchase count, average item price, and total purchase value\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Sort the purchase count column in descending order\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display a preview of the summary data frame\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "################################################################\n",
    "# 8. Most Popular Items\n",
    "#    a) Retrieve the Item ID, Item Name, and Item Price columns\n",
    "#    b) Group by Item ID and Item Name\n",
    "#    c) Perform calculations to obtain purchase count, average item price, and total purchase value\n",
    "#    d) Create a summary data frame to hold the results\n",
    "#    e) Sort the purchase count column in descending order\n",
    "#    f) Optional: give the displayed data cleaner formatting\n",
    "#    g) Display a preview of the summary data frame\n",
    "#\n",
    "################################################################\n",
    "#\n",
    "# a) Retrieve the Item ID, Item Name, and Item Price columns (using .loc)  \n",
    "#\n",
    "retrieve_most_popular_data_frame = purchase_data_pd.loc[:,[\"Item ID\",\"Item Name\",\"Price\"]]\n",
    "\n",
    "# b) Group by Item ID and Item Name\n",
    "# Group data using groupby() based  on Group \"Item ID\" and \"Item Name\"\n",
    "#\n",
    "most_popular_item_group = purchase_data_pd.groupby([\"Item ID\", \"Item Name\"])\n",
    "\n",
    "# c) Perform calculations to obtain purchase count, average item price, and total purchase value\n",
    "# \n",
    "purchase_count = most_popular_item_group[\"Age\"].count()\n",
    "average_purchase = most_popular_item_group[\"Price\"].mean()\n",
    "total_purchase_value = most_popular_item_group[\"Price\"].sum()\n",
    "\n",
    "# d) Create a summary data frame to hold the results\n",
    "#  Using pandas DataFrame() to create the \"most_popular_item\" data frame\n",
    "#  \n",
    "most_popular_items = pd.DataFrame({\"Purchase count\":purchase_count,\n",
    "                                   \"Average Purchase Price\":average_purchase,\n",
    "                                   \"Total Purchase value\":total_purchase_value})\n",
    "\n",
    "# e) Sort the purchase count column in descending order\n",
    "#     \n",
    "most_popular_items = most_popular_items.sort_values(\"Purchase count\", ascending = False)\n",
    "\n",
    "# f) Optional: give the displayed data cleaner formatting\n",
    "#    Format \"Total Purchase value\" and \"Average Purchase Price\" as per the given example format\n",
    "#\n",
    "most_popular_items[\"Total Purchase value\"]  = most_popular_items[\"Total Purchase value\"].map(\"${:,.2f}\".format)\n",
    "most_popular_items[\"Average Purchase Price\"] = most_popular_items[\"Average Purchase Price\"].map(\"${:.2f}\".format)\n",
    "\n",
    "\n",
    "# g) Display a preview of the summary data frame\n",
    "#   Print the most popular item data frame\n",
    "#\n",
    "most_popular_items.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Most Profitable Items"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Sort the above table by total purchase value in descending order\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display a preview of the data frame\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "################################################################\n",
    "# 9. Most Profitable Items¶\n",
    "#    a) Sort the above table by total purchase value in descending order\n",
    "#    b) Optional: give the displayed data cleaner formatting\n",
    "#    c) Display a preview of the data frame\n",
    "#\n",
    "################################################################\n",
    "\n",
    "# Create a data fram as \"most_profitable_items using panda \"DataFrame() func \n",
    "# to hold the above results \n",
    "#  - Reusing the values from previous run on \"Most Popular Items\"\n",
    "#    for purchase_count, average_purchase and total_purchase_value\n",
    "#   \n",
    "most_profitable_items = pd.DataFrame({\"Purchase count\":purchase_count,\"Average Purchase Price\":average_purchase,\n",
    "                                  \"Total Purchase value\":total_purchase_value})\n",
    "\n",
    "# a) Sort the above table by total purchase value in descending order and store it \n",
    "#    to the varibale \"most_ptofitable_items\"\n",
    "#   \n",
    "most_ptofitable_items = most_profitable_items.sort_values(\"Total Purchase value\", ascending = False)\n",
    "\n",
    "#    b) Optional: give the displayed data cleaner formatting\n",
    "#           Formatting \"Total Purchase value\" and \"Average Purchase Price\" \n",
    "#           as per the given example format to $ and 2 decimal points for \n",
    "#           \"Total Purchase value\" and \"Average Purchase Price\"\n",
    "#\n",
    "most_ptofitable_items[\"Total Purchase value\"]  = most_ptofitable_items[\"Total Purchase value\"].map(\"${:,.2f}\".format)\n",
    "most_ptofitable_items[\"Average Purchase Price\"] = most_ptofitable_items[\"Average Purchase Price\"].map(\"${:.2f}\".format)\n",
    "\n",
    "# c) Display a preview of the data frame\n",
    "# Print the Most Profitable Items Table\n",
    "#\n",
    "most_ptofitable_items.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nteract": {
   "version": "0.2.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
